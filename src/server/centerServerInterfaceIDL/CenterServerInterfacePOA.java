package server.centerServerInterfaceIDL;


/**
* server/centerServerInterfaceIDL/CenterServerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CenterServerInterfaceIDL.idl
* Friday, October 26, 2018 5:01:33 PM EDT
*/

public abstract class CenterServerInterfacePOA extends org.omg.PortableServer.Servant
 implements server.centerServerInterfaceIDL.CenterServerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createMRecord", new java.lang.Integer (0));
    _methods.put ("createERecord", new java.lang.Integer (1));
    _methods.put ("getRecordCounts", new java.lang.Integer (2));
    _methods.put ("editRecord", new java.lang.Integer (3));
    _methods.put ("transferRecords", new java.lang.Integer (4));
    _methods.put ("getLocalCounts", new java.lang.Integer (5));
    _methods.put ("searchIfRecordExists", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // server/centerServerInterfaceIDL/CenterServerInterface/createMRecord
       {
         String managerId = in.read_string ();
         String firstName = in.read_string ();
         String lastName = in.read_string ();
         int empId = in.read_long ();
         String mailId = in.read_string ();
         server.centerServerInterfaceIDL.ProjectInfo project = server.centerServerInterfaceIDL.ProjectInfoHelper.read (in);
         String location = in.read_string ();
         String $result = null;
         $result = this.createMRecord (managerId, firstName, lastName, empId, mailId, project, location);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // server/centerServerInterfaceIDL/CenterServerInterface/createERecord
       {
         String managerId = in.read_string ();
         String firstName = in.read_string ();
         String lastName = in.read_string ();
         int empId = in.read_long ();
         String mailId = in.read_string ();
         String projectId = in.read_string ();
         String $result = null;
         $result = this.createERecord (managerId, firstName, lastName, empId, mailId, projectId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // server/centerServerInterfaceIDL/CenterServerInterface/getRecordCounts
       {
         String managerId = in.read_string ();
         String $result = null;
         $result = this.getRecordCounts (managerId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // server/centerServerInterfaceIDL/CenterServerInterface/editRecord
       {
         String managerId = in.read_string ();
         String recordId = in.read_string ();
         String fieldName = in.read_string ();
         String newValue = in.read_string ();
         String $result = null;
         $result = this.editRecord (managerId, recordId, fieldName, newValue);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // server/centerServerInterfaceIDL/CenterServerInterface/transferRecords
       {
         String managerId = in.read_string ();
         String recordId = in.read_string ();
         String remoteCenterServerName = in.read_string ();
         String $result = null;
         $result = this.transferRecords (managerId, recordId, remoteCenterServerName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // server/centerServerInterfaceIDL/CenterServerInterface/getLocalCounts
       {
         String $result = null;
         $result = this.getLocalCounts ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // server/centerServerInterfaceIDL/CenterServerInterface/searchIfRecordExists
       {
         String recordId = in.read_string ();
         boolean $result = false;
         $result = this.searchIfRecordExists (recordId);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:server/centerServerInterfaceIDL/CenterServerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CenterServerInterface _this() 
  {
    return CenterServerInterfaceHelper.narrow(
    super._this_object());
  }

  public CenterServerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return CenterServerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class CenterServerInterfacePOA
